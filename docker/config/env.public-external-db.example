# ============================================
# Cal3 Docker Environment Configuration
# Public Access with External Database
# ============================================
# Copy this file to .env and fill in your values
# For public deployment: cp docker/config/env.public-external-db.example docker/config/.env
#
# Use case: Frontend and Backend exposed to internet, Database on local network
# Example:
#   - Frontend accessible at: http://your-public-ip:8080
#   - Backend accessible at: http://your-public-ip:8081
#   - Database accessed by backend at: 192.168.1.101:5433 (NOT exposed to internet)

# ============================================
# Database Configuration (External/Local Network)
# ============================================
DB_TYPE=postgres
# IMPORTANT: Database host accessible from Docker host (e.g., local network IP)
# Examples: 192.168.1.101, db.local, localhost
DB_HOST=192.168.1.101
DB_PORT=5433
DB_USERNAME=cal3_user
DB_PASSWORD=changeme_strong_password_here
DB_NAME=cal3_production

# Database Connection Options
DB_SSL=false                              # Set true for cloud databases (Azure, AWS RDS)
DB_SSL_REJECT_UNAUTHORIZED=false          # Set true for production with valid SSL certs
DB_SYNCHRONIZE=false                      # NEVER true in production
DB_LOGGING=false                          # Set true for debugging

# Connection Pool
DB_POOL_MAX=10
DB_POOL_MIN=2
DB_IDLE_TIMEOUT=30000
DB_CONNECTION_TIMEOUT=10000

# ============================================
# Application Configuration
# ============================================
NODE_ENV=production

# ============================================
# Public Access Configuration
# ============================================
# IMPORTANT: Set BASE_URL to your public IP or domain
# Examples:
#   - http://123.45.67.89 (public IP)
#   - http://yourdomain.com (domain with port)
#   - https://yourdomain.com (with SSL/reverse proxy)
BASE_URL=http://your-public-ip-or-domain

# Frontend and Backend Ports (accessible from internet)
FRONTEND_PORT=8080                        # Frontend web interface
BACKEND_PORT=8081                         # Backend API

# Full URLs (auto-constructed if not provided)
# FRONTEND_URL=${BASE_URL}:${FRONTEND_PORT}
# API_URL=${BASE_URL}:${BACKEND_PORT}

# Example configurations:
# 1. Public IP without domain:
#    BASE_URL=http://203.0.113.45
#    FRONTEND_PORT=8080
#    BACKEND_PORT=8081
#    Result: Frontend at http://203.0.113.45:8080, Backend at http://203.0.113.45:8081
#
# 2. Domain with custom ports:
#    BASE_URL=http://cal3.example.com
#    FRONTEND_PORT=8080
#    BACKEND_PORT=8081
#    Result: Frontend at http://cal3.example.com:8080, Backend at http://cal3.example.com:8081
#
# 3. With reverse proxy (no ports in URL):
#    BASE_URL=https://cal3.example.com
#    FRONTEND_URL=https://cal3.example.com
#    API_URL=https://cal3.example.com/api
#    FRONTEND_PORT=8080  # Internal only
#    BACKEND_PORT=8081   # Internal only

# ============================================
# Security
# ============================================
# IMPORTANT: Generate with: openssl rand -base64 32
# Minimum 32 characters required
JWT_SECRET=your-super-secret-jwt-key-min-32-chars-change-this

# ============================================
# Google OAuth (Optional)
# ============================================
# Get credentials from: https://console.cloud.google.com/
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret
# IMPORTANT: Update callback URL with your public BASE_URL
GOOGLE_CALLBACK_URL=${BASE_URL}:${BACKEND_PORT}/api/auth/google/callback

# ============================================
# Microsoft OAuth (Optional)
# ============================================
# Get credentials from: https://portal.azure.com/
MICROSOFT_CLIENT_ID=your-microsoft-client-id
MICROSOFT_CLIENT_SECRET=your-microsoft-client-secret
# IMPORTANT: Update callback URL with your public BASE_URL
MICROSOFT_CALLBACK_URL=${BASE_URL}:${BACKEND_PORT}/api/auth/microsoft/callback
MICROSOFT_TENANT_ID=common

# ============================================
# Feature Flags (Optional)
# ============================================
ENABLE_OAUTH=true
ENABLE_CALENDAR_SYNC=true
ENABLE_RESERVATIONS=true
ENABLE_AUTOMATION=true

# ============================================
# Security Notes for Public Deployment
# ============================================
# 1. FIREWALL CONFIGURATION:
#    - Open ports ${FRONTEND_PORT} and ${BACKEND_PORT} on your firewall
#    - DO NOT open database port (${DB_PORT}) - keep it local only
#    - Consider using UFW (Linux):
#      sudo ufw allow ${FRONTEND_PORT}/tcp
#      sudo ufw allow ${BACKEND_PORT}/tcp
#
# 2. REVERSE PROXY (Recommended):
#    - Use nginx/traefik/caddy for SSL termination
#    - Implement rate limiting
#    - Add DDoS protection
#
# 3. DATABASE SECURITY:
#    - Database should only be accessible from Docker host's local network
#    - Configure database firewall to only allow connections from Docker host IP
#    - Use strong database password (16+ characters)
#
# 4. OAUTH CALLBACKS:
#    - Update OAuth callback URLs in Google/Microsoft console with public BASE_URL
#    - Callback URLs must match exactly (including http/https, domain, port)
#
# 5. SSL/HTTPS (Highly Recommended):
#    - Use Let's Encrypt for free SSL certificates
#    - Set up reverse proxy with SSL termination
#    - Update BASE_URL to https://yourdomain.com
#
# 6. MONITORING:
#    - Monitor container logs: docker-compose logs -f
#    - Set up health check monitoring
#    - Consider using Portainer for web-based management

# ============================================
# Example Deployment Scenarios
# ============================================

# Scenario 1: Home server with dynamic DNS
# BASE_URL=http://mycal3.dyndns.org
# FRONTEND_PORT=8080
# BACKEND_PORT=8081
# DB_HOST=192.168.1.100
# DB_PORT=5433
# Router port forwarding: 8080->8080, 8081->8081

# Scenario 2: VPS with public IP
# BASE_URL=http://203.0.113.45
# FRONTEND_PORT=8080
# BACKEND_PORT=8081
# DB_HOST=192.168.1.101
# DB_PORT=5433
# Database on separate local server

# Scenario 3: Production with domain and SSL
# BASE_URL=https://cal3.example.com
# FRONTEND_URL=https://cal3.example.com
# API_URL=https://cal3.example.com/api
# FRONTEND_PORT=8080  # Behind reverse proxy
# BACKEND_PORT=8081   # Behind reverse proxy
# DB_HOST=192.168.10.50
# DB_PORT=5432
# Nginx handles SSL and proxies to containers
