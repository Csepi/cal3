version: '3.9'

# ===========================================
# Production Docker Compose for Cal3
# ===========================================
#
# Environment Configuration:
# - Copy config/env.example to config/.env
# - Edit config/.env with your values
# - The config folder is mounted as a volume
#
# Applications start automatically when containers start

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cal3-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "127.0.0.1:${DB_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - cal3-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API (NestJS)
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
      args:
        NODE_ENV: production
    container_name: cal3-backend
    restart: unless-stopped
    env_file:
      - ./config/.env
    volumes:
      - ./config:/app/config:ro
    environment:
      NODE_ENV: production
      PORT: 8081
      DB_TYPE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:8080}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_CALLBACK_URL: ${GOOGLE_CALLBACK_URL}
      MICROSOFT_CLIENT_ID: ${MICROSOFT_CLIENT_ID}
      MICROSOFT_CLIENT_SECRET: ${MICROSOFT_CLIENT_SECRET}
      MICROSOFT_CALLBACK_URL: ${MICROSOFT_CALLBACK_URL}
      MICROSOFT_TENANT_ID: ${MICROSOFT_TENANT_ID:-common}
    ports:
      - "127.0.0.1:8081:8081"
    networks:
      - cal3-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8081/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend (React + Nginx)
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
      args:
        API_URL: ${API_URL:-http://localhost:8081}
    container_name: cal3-frontend
    restart: unless-stopped
    env_file:
      - ./config/.env
    volumes:
      - ./config:/etc/cal3/config:ro
    environment:
      API_URL: http://backend:8081
      NODE_ENV: production
    ports:
      - "${FRONTEND_PORT:-8080}:80"
    networks:
      - cal3-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  cal3-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    name: cal3_postgres_data
  config:
    name: cal3_config
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./config
