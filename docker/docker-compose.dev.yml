version: '3.9'

# ===========================================
# Development Docker Compose for Cal3
# Hot-reload enabled for both frontend and backend
# ===========================================
#
# Environment Configuration:
# - Copy config/env.example to config/.env.dev
# - Edit config/.env.dev with your dev values
# - Or use defaults (postgres/postgres/cal3_dev)
#
# Applications start automatically when containers start

services:
  # PostgreSQL Database (Development)
  postgres:
    image: postgres:15-alpine
    container_name: cal3-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-cal3_dev}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    networks:
      - cal3-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (NestJS) - Development mode
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend.dev
    container_name: cal3-backend-dev
    restart: unless-stopped
    env_file:
      - ./config/.env.dev
    volumes:
      - ./config:/app/config:ro
      # Mount source code for hot reload
      - ../backend-nestjs/src:/app/src
      - ../backend-nestjs/package*.json:/app/package*.json
      # Use named volume for node_modules to avoid conflicts
      - backend_node_modules:/app/node_modules
    environment:
      NODE_ENV: development
      PORT: 8081
      DB_TYPE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-cal3_dev}
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-change-in-production}
      FRONTEND_URL: http://localhost:8080
      # Optional bootstrap overrides (runtime managed in Admin -> Runtime Configuration)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      GOOGLE_CALLBACK_URL: ${GOOGLE_CALLBACK_URL:-}
      MICROSOFT_CLIENT_ID: ${MICROSOFT_CLIENT_ID:-}
      MICROSOFT_CLIENT_SECRET: ${MICROSOFT_CLIENT_SECRET:-}
            MICROSOFT_CALLBACK_URL: ${MICROSOFT_CALLBACK_URL:-}
      MICROSOFT_TENANT_ID: ${MICROSOFT_TENANT_ID:-common}
    ports:
      - "8081:8081"
    networks:
      - cal3-network
    depends_on:
      postgres:
        condition: service_healthy
    command: npm run start:dev

  # Frontend (React + Vite) - Development mode
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend.dev
    container_name: cal3-frontend-dev
    restart: unless-stopped
    env_file:
      - ./config/.env.dev
    volumes:
      - ./config:/app/config:ro
      # Mount source code for hot reload
      - ../frontend/src:/app/src
      - ../frontend/package*.json:/app/package*.json
      - ../frontend/index.html:/app/index.html
      - ../frontend/vite.config.ts:/app/vite.config.ts
      - ../frontend/tsconfig.json:/app/tsconfig.json
      - ../frontend/tsconfig.node.json:/app/tsconfig.node.json
      - ../frontend/tailwind.config.js:/app/tailwind.config.js
      - ../frontend/postcss.config.js:/app/postcss.config.js
      # Use named volume for node_modules to avoid conflicts
      - frontend_node_modules:/app/node_modules
    environment:
      NODE_ENV: development
    ports:
      - "8080:8080"
    networks:
      - cal3-network
    depends_on:
      - backend
    command: npm run dev

networks:
  cal3-network:
    driver: bridge

volumes:
  postgres_data_dev:
    name: cal3_postgres_data_dev
  backend_node_modules:
    name: cal3_backend_node_modules_dev
  frontend_node_modules:
    name: cal3_frontend_node_modules_dev
